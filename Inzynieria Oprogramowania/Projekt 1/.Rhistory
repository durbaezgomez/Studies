mean_time_vector <- c()
size_vector <- c(91, 218, 325, 430, 538)
for(i in size_vector) {
time <- 0
for(j in c(1,2,3)) {
current_file <- paste(file_3SAT,paste(i, paste("/", paste(j, ".cnf", sep=""), sep=""), sep=""), sep="")
message(sprintf("Wczytuje plik %s", current_file))
var_location_array <- load_variables_locations_from_file(current_file)
threeSATGenAlg <- 0
time <- time + system.time(threeSATGenAlg <- rbga.bin(size = length(unique(abs(var_location_array))), popSize = 200, iters = 100,
mutationChance = 0.05, elitism = T, evalFunc = fitness3SAT))[1] #uzyskanie czasu "zegarowego"
message(sprintf("Najlepszy wynik: %d/%d, znaleziony w iteracji: ", abs(min(threeSATGenAlg$best)), i))
}
mean_time = time / 3.0
mean_time_vector <- c(mean_time_vector, mean_time)
}
write.csv(data.frame(c(size_vector, mean_time_vector)), "dokladne_czasy.csv")
plot(size_vector, mean_time_vector, type="o", pch=19,col="blue", xlab="Ilość klauzul", ylab="Średni czas wykonania (sek)", main="Czasu wykonywania alg. genetycznego")
library(genalg)
file_3SAT <- "./samples/"
#JAN BIENIAS 238201
#PROBLEM 3SAT
#ADDITIONAL FUNCTIONS
load_variables_locations_from_file <- function(file_name) {
con <- file(file_name)
len <- length(readLines(con)) - 11  #plik cnf - góra 8 linii, dół 2 linie
data <- read.table(con , skip=8, nrows=len)
vector <- c()
for (i in c(0:len) ) {
for (j in c(1:3)) {
vector <- c(vector, data[i, j])
}
}
return(vector)
}
negate <- function(num) {
ifelse(num==0, return(1), return(0))
}
extended_sample <- function(x, y, n, duplicates) {
set.seed(as.integer((as.double(Sys.time())*1000+Sys.getpid()) %% 2^31))
return(sample(x:y, n, replace=duplicates))
}
#stara funkcja generujaca losowe rozmieszczenie zmiennych z ew. powtorzeniami
generate_variable_locations <- function(ilosc_zmiennych, ilosc_pol) {
rozstawienie_zmiennych <- extended_sample(1, ilosc_zmiennych, ilosc_zmiennych, F)
if(ilosc_pol-ilosc_zmiennych > 0) {
powtorki_zmiennych <- extended_sample(1, ilosc_zmiennych, ilosc_pol-ilosc_zmiennych, T)
rozstawienie_zmiennych <- c(rozstawienie_zmiennych, powtorki_zmiennych)
rozstawienie_zmiennych <- sample(rozstawienie_zmiennych)
}
return(rozstawienie_zmiennych)
}
#FUNKCJA FITNESS
var_location_array <- c()
fitness3SAT <- function(chromosome){
counter <- 0
for(i in seq(1, length(var_location_array), by = 3)) {
trio <- c(0,0,0)
for(j in 0:2) {
if (var_location_array[i+j] < 0) {
trio[j+1] <- negate(chromosome[abs(var_location_array[i+j])])
} else {
trio[j+1] <- chromosome[abs(var_location_array[i+j])]
}
}
if(1 %in% trio) {
counter <- counter+1
}
}
return(-counter)
}
mean_time_vector <- c()
size_vector <- c(91, 218, 325, 430, 538)
for(i in size_vector) {
time <- 0
for(j in c(1,2,3)) {
current_file <- paste(file_3SAT,paste(i, paste("/", paste(j, ".cnf", sep=""), sep=""), sep=""), sep="")
message(sprintf("Wczytuje plik %s", current_file))
var_location_array <- load_variables_locations_from_file(current_file)
threeSATGenAlg <- 0
time <- time + system.time(threeSATGenAlg <- rbga.bin(size = length(unique(abs(var_location_array))), popSize = 200, iters = 100,
mutationChance = 0.05, elitism = T, evalFunc = fitness3SAT))[1] #uzyskanie czasu "zegarowego"
message(sprintf("Najlepszy wynik: %d/%d, znaleziony w iteracji: ", abs(min(threeSATGenAlg$best)), i))
}
mean_time = time / 3.0
mean_time_vector <- c(mean_time_vector, mean_time)
}
write.csv(data.frame(c(size_vector, mean_time_vector)), "dokladne_czasy.csv")
plot(size_vector, mean_time_vector, type="o", pch=19,col="blue", xlab="Ilość klauzul", ylab="Średni czas wykonania (sek)", main="Czasu wykonywania alg. genetycznego")
mean_time_vector <- c()
size_vector <- c(91, 218, 325, 430, 538)
for(i in size_vector) {
time <- 0
for(j in c(1,2,3)) {
current_file <- paste(file_3SAT,paste(i, paste("/", paste(j, ".cnf", sep=""), sep=""), sep=""), sep="")
message(sprintf("Wczytuje plik %s", current_file))
var_location_array <- load_variables_locations_from_file(current_file)
threeSATGenAlg <- 0
time <- time + system.time(threeSATGenAlg <- rbga.bin(size = length(unique(abs(var_location_array))), popSize = 200, iters = 100,
mutationChance = 0.05, elitism = T, evalFunc = fitness3SAT))[1] #uzyskanie czasu "zegarowego"
message(sprintf("Najlepszy wynik: %d/%d, znaleziony w iteracji: ", abs(min(threeSATGenAlg$best)), i))
}
mean_time = time / 3.0
mean_time_vector <- c(mean_time_vector, mean_time)
}
mean_time_vector <- c()
size_vector <- c(91, 218, 325, 430, 538)
for(i in size_vector) {
time <- 0
for(j in c(1,2,3)) {
current_file <- paste(file_3SAT,paste(i, paste("/", paste(j, ".cnf", sep=""), sep=""), sep=""), sep="")
message(sprintf("Wczytuje plik %s", current_file))
var_location_array <- load_variables_locations_from_file(current_file)
threeSATGenAlg <- 0
time <- time + system.time(threeSATGenAlg <- rbga.bin(size = length(unique(abs(var_location_array))), popSize = 200, iters = 100,
mutationChance = 0.05, elitism = T, evalFunc = fitness3SAT))[1] #uzyskanie czasu "zegarowego"
message(sprintf("Najlepszy wynik: %d/%d, znaleziony w iteracji: ", abs(min(threeSATGenAlg$best)), i))
}
mean_time = time / 3.0
mean_time_vector <- c(mean_time_vector, mean_time)
}
write.csv(data.frame(c(size_vector, mean_time_vector)), "dokladne_czasy.csv")
plot(size_vector, mean_time_vector, type="o", pch=19,col="blue", xlab="Ilość klauzul", ylab="Średni czas wykonania (sek)", main="Czasy wykonywania alg. genetycznego")
install.packages("party")
