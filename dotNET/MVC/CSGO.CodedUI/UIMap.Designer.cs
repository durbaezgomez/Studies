// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CSGO.CodedUI
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// OpenIEAndGoToMainPage - Use 'OpenIEAndGoToMainPageParams' to pass parameters into this method.
        /// </summary>
        public void OpenIEAndGoToMainPage()
        {

            // Go to web page 'http://localhost:5000/' using new browser instance
            this.UIPustastronaInternetEWindow.LaunchUrl(new System.Uri(this.OpenIEAndGoToMainPageParams.UIPustastronaInternetEWindowUrl));
        }
        
        /// <summary>
        /// AssertBrowserOnMainPage - Use 'AssertBrowserOnMainPageExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertBrowserOnMainPage()
        {
            #region Variable Declarations
            WinEdit uIAdresEdit = this.UIPustastronaInternetEWindow.UIItemWindow.UIPasekadresuClient.UIAdresEdit;
            #endregion

            // Verify that the 'Text' property of 'Adres' text box equals 'http://localhost:5000/'
            Assert.AreEqual(this.AssertBrowserOnMainPageExpectedValues.UIAdresEditText, uIAdresEdit.Text, "Not on main page (localhost:5000)");
        }
        
        /// <summary>
        /// LogInAsAdmin - Use 'LogInAsAdminParams' to pass parameters into this method.
        /// </summary>
        public void LogInAsAdmin()
        {
            #region Variable Declarations
            HtmlHyperlink uILoginHyperlink = this.UIPustastronaInternetEWindow.UIMainPageCSGODocument.UILoginHyperlink;
            HtmlEdit uIEmailEdit = this.UIPustastronaInternetEWindow.UILoginCSGODocument.UIEmailEdit;
            HtmlEdit uIPasswordEdit = this.UIPustastronaInternetEWindow.UILoginCSGODocument.UIPasswordEdit;
            HtmlButton uILoginButton = this.UIPustastronaInternetEWindow.UILoginCSGODocument.UILoginButton;
            #endregion

            // Click 'Log in' link
            Mouse.Click(uILoginHyperlink, new Point(28, 14));

            // Type 'admin@admin.com' in 'Email' text box
            uIEmailEdit.Text = this.LogInAsAdminParams.UIEmailEditText;

            // Type '{Tab}' in 'Email' text box
            Keyboard.SendKeys(uIEmailEdit, this.LogInAsAdminParams.UIEmailEditSendKeys, ModifierKeys.None);

            // Type '********' in 'Password' text box
            uIPasswordEdit.Password = this.LogInAsAdminParams.UIPasswordEditPassword;

            // Click 'Log in' button
            Mouse.Click(uILoginButton, new Point(29, 23));
        }
        
        /// <summary>
        /// Checks if "Welcome administrator - '...' " is username "admin"
        /// </summary>
        public void AssertLoggedAsAdmin()
        {
            #region Variable Declarations
            HtmlCustom uIItemCustom = this.UIPustastronaInternetEWindow.UIMainPageCSGODocument.UIWelcomeadministratorHyperlink.UIItemCustom;
            #endregion

            // Verify that the 'InnerText' property of custom control equals 'admin'
            Assert.AreEqual(this.AssertLoggedAsAdminExpectedValues.UIItemCustomInnerText, uIItemCustom.InnerText);
        }
        
        /// <summary>
        /// AddTeamAndReturnToHome - Use 'AddTeamAndReturnToHomeParams' to pass parameters into this method.
        /// </summary>
        public void AddTeamAndReturnToHome()
        {
            #region Variable Declarations
            HtmlDiv uICheckoutmainCSGOsitePane = this.UIPustastronaInternetEWindow.UIMainPageCSGODocument.UICheckoutmainCSGOsitePane;
            HtmlHyperlink uITeamsHyperlink = this.UIPustastronaInternetEWindow.UIMainPageCSGODocument.UITeamsHyperlink;
            HtmlHyperlink uICreateHyperlink = this.UIPustastronaInternetEWindow.UITeamsCSGODocument.UICreateHyperlink;
            HtmlEdit uITeamnameEdit = this.UIPustastronaInternetEWindow.UICreateTeamCSGODocument.UITeamnameEdit;
            HtmlEdit uIDateoffoundingEdit = this.UIPustastronaInternetEWindow.UICreateTeamCSGODocument.UIDateoffoundingEdit;
            HtmlInputButton uICreateButton = this.UIPustastronaInternetEWindow.UICreateTeamCSGODocument.UICreateButton;
            HtmlHyperlink uICSGOHyperlink = this.UIPustastronaInternetEWindow.UITeamsCSGODocument.UICSGOHyperlink;
            #endregion

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Mouse hover 'Check out main CSGO site for updates dir' pane at (1, 1)
            Mouse.Hover(uICheckoutmainCSGOsitePane, new Point(1, 1));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Click 'Teams' link
            Mouse.Click(uITeamsHyperlink, new Point(16, 23));

            // Click 'Create' link
            Mouse.Click(uICreateHyperlink, new Point(46, 3));

            // Type 'Testowa' in 'Team name' text box
            uITeamnameEdit.Text = this.AddTeamAndReturnToHomeParams.UITeamnameEditText;

            // Type '{Tab}' in 'Team name' text box
            Keyboard.SendKeys(uITeamnameEdit, this.AddTeamAndReturnToHomeParams.UITeamnameEditSendKeys, ModifierKeys.None);

            // Type '11-11-1999' in 'Date of founding' text box
            uIDateoffoundingEdit.Text = this.AddTeamAndReturnToHomeParams.UIDateoffoundingEditText;

            // Click 'Create' button
            Mouse.Click(uICreateButton, new Point(50, 4));

            // Click 'CSGO' link
            Mouse.Click(uICSGOHyperlink, new Point(48, 23));
        }
        
        /// <summary>
        /// CreateTeam - Use 'CreateTeamParams' to pass parameters into this method.
        /// </summary>
        public void CreateTeam()
        {
            #region Variable Declarations
            HtmlHyperlink uITeamsHyperlink = this.UIPustastronaInternetEWindow.UIMainPageCSGODocument.UITeamsHyperlink;
            HtmlHyperlink uICreateHyperlink = this.UIPustastronaInternetEWindow.UITeamsCSGODocument.UICreateHyperlink;
            HtmlDiv uITeamnamePane = this.UIPustastronaInternetEWindow.UICreateTeamCSGODocument.UITeamnamePane;
            HtmlEdit uITeamnameEdit = this.UIPustastronaInternetEWindow.UICreateTeamCSGODocument.UITeamnameEdit;
            HtmlEdit uIDateoffoundingEdit = this.UIPustastronaInternetEWindow.UICreateTeamCSGODocument.UIDateoffoundingEdit;
            HtmlInputButton uICreateButton = this.UIPustastronaInternetEWindow.UICreateTeamCSGODocument.UICreateButton;
            #endregion

            // Click 'Teams' link
            Mouse.Click(uITeamsHyperlink, new Point(40, 33));

            // Click 'Create' link
            Mouse.Click(uICreateHyperlink, new Point(36, 16));

            // Click 'Team name' pane
            Mouse.Click(uITeamnamePane, new Point(121, 24));

            // Type 'Testowa' in 'Team name' text box
            uITeamnameEdit.Text = this.CreateTeamParams.UITeamnameEditText;

            // Type '{Tab}' in 'Team name' text box
            Keyboard.SendKeys(uITeamnameEdit, this.CreateTeamParams.UITeamnameEditSendKeys, ModifierKeys.None);

            // Type '11-11-1999' in 'Date of founding' text box
            uIDateoffoundingEdit.Text = this.CreateTeamParams.UIDateoffoundingEditText;

            // Click 'Create' button
            Mouse.Click(uICreateButton, new Point(49, 20));
        }
        
        /// <summary>
        /// AssertTeamExist - Use 'AssertTeamExistExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTeamExist()
        {
            #region Variable Declarations
            HtmlCell uITestowaCell = this.UIPustastronaInternetEWindow.UITeamsCSGODocument.UIItemTable.UITestowaCell;
            #endregion

            // Verify that the 'InnerText' property of 'Testowa' cell equals 'Testowa '
            Assert.AreEqual(this.AssertTeamExistExpectedValues.UITestowaCellInnerText, uITestowaCell.InnerText);
        }
        
        /// <summary>
        /// Creates player with test team created before
        /// </summary>
        public void CreatePlayer()
        {
            #region Variable Declarations
            HtmlHyperlink uIPlayersHyperlink = this.UIPustastronaInternetEWindow.UITeamsCSGODocument.UIPlayersHyperlink;
            HtmlHyperlink uICreateHyperlink = this.UIPustastronaInternetEWindow.UIPlayersCSGODocument.UICreateHyperlink;
            HtmlEdit uINameEdit = this.UIPustastronaInternetEWindow.UICreatePlayerCSGODocument.UINameEdit;
            HtmlEdit uISurnameEdit = this.UIPustastronaInternetEWindow.UICreatePlayerCSGODocument.UISurnameEdit;
            HtmlEdit uINicknameEdit = this.UIPustastronaInternetEWindow.UICreatePlayerCSGODocument.UINicknameEdit;
            HtmlEdit uISalaryEdit = this.UIPustastronaInternetEWindow.UICreatePlayerCSGODocument.UISalaryEdit;
            HtmlEdit uIDateofbirthEdit = this.UIPustastronaInternetEWindow.UICreatePlayerCSGODocument.UIDateofbirthEdit;
            HtmlComboBox uITeamComboBox = this.UIPustastronaInternetEWindow.UICreatePlayerCSGODocument.UITeamComboBox;
            HtmlInputButton uICreateButton = this.UIPustastronaInternetEWindow.UICreatePlayerCSGODocument.UICreateButton;
            #endregion

            // Click 'Players' link
            Mouse.Click(uIPlayersHyperlink, new Point(48, 21));

            // Click 'Create' link
            Mouse.Click(uICreateHyperlink, new Point(44, 13));

            // Type 'Janek' in 'Name' text box
            uINameEdit.Text = this.CreatePlayerParams.UINameEditText;

            // Type '{Tab}' in 'Name' text box
            Keyboard.SendKeys(uINameEdit, this.CreatePlayerParams.UINameEditSendKeys, ModifierKeys.None);

            // Type 'Hergroth' in 'Surname' text box
            uISurnameEdit.Text = this.CreatePlayerParams.UISurnameEditText;

            // Type '{Tab}' in 'Surname' text box
            Keyboard.SendKeys(uISurnameEdit, this.CreatePlayerParams.UISurnameEditSendKeys, ModifierKeys.None);

            // Type '{LShiftKey}' in 'Nickname' text box
            Keyboard.SendKeys(uINicknameEdit, this.CreatePlayerParams.UINicknameEditSendKeys, ModifierKeys.None);

            // Type 'Bienias' in 'Surname' text box
            uISurnameEdit.Text = this.CreatePlayerParams.UISurnameEditText1;

            // Type '{Tab}' in 'Surname' text box
            Keyboard.SendKeys(uISurnameEdit, this.CreatePlayerParams.UISurnameEditSendKeys1, ModifierKeys.None);

            // Type 'Hergroth' in 'Nickname' text box
            uINicknameEdit.Text = this.CreatePlayerParams.UINicknameEditText;

            // Type '{Tab}' in 'Nickname' text box
            Keyboard.SendKeys(uINicknameEdit, this.CreatePlayerParams.UINicknameEditSendKeys1, ModifierKeys.None);

            // Type '2137' in 'Salary' text box
            uISalaryEdit.Text = this.CreatePlayerParams.UISalaryEditText;

            // Type '{Tab}' in 'Salary' text box
            Keyboard.SendKeys(uISalaryEdit, this.CreatePlayerParams.UISalaryEditSendKeys, ModifierKeys.None);

            // Type '19-04-1996' in 'Date of birth' text box
            uIDateofbirthEdit.Text = this.CreatePlayerParams.UIDateofbirthEditText;

            // Select 'Testowa' in 'Team' combo box
            uITeamComboBox.SelectedItem = this.CreatePlayerParams.UITeamComboBoxSelectedItem;

            // Click 'Create' button
            Mouse.Click(uICreateButton, new Point(24, 33));
        }
        
        /// <summary>
        /// AssertPlayerExists - Use 'AssertPlayerExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertPlayerExists()
        {
            #region Variable Declarations
            HtmlCell uIHergrothCell = this.UIPustastronaInternetEWindow.UIPlayersCSGODocument.UIItemTable.UIHergrothCell;
            #endregion

            // Verify that the 'InnerText' property of 'Hergroth' cell equals 'Hergroth '
            Assert.AreEqual(this.AssertPlayerExistsExpectedValues.UIHergrothCellInnerText, uIHergrothCell.InnerText);
        }
        
        /// <summary>
        /// EditPlayerSurname - Use 'EditPlayerSurnameParams' to pass parameters into this method.
        /// </summary>
        public void EditPlayerSurname()
        {
            #region Variable Declarations
            HtmlHyperlink uIEditHyperlink = this.UIPustastronaInternetEWindow.UIPlayersCSGODocument.UIEditHyperlink;
            HtmlEdit uISurnameEdit = this.UIPustastronaInternetEWindow.UIEditPlayerCSGODocument.UISurnameEdit;
            HtmlInputButton uISaveButton = this.UIPustastronaInternetEWindow.UIEditPlayerCSGODocument.UISaveButton;
            #endregion

            // Click 'Edit' link
            Mouse.Click(uIEditHyperlink, new Point(11, 7));

            // Type 'Lewandowski' in 'Surname' text box
            uISurnameEdit.Text = this.EditPlayerSurnameParams.UISurnameEditText;

            // Click 'Save' button
            Mouse.Click(uISaveButton, new Point(22, 22));
        }
        
        /// <summary>
        /// AssertSurnameIsChanged - Use 'AssertSurnameIsChangedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertSurnameIsChanged()
        {
            #region Variable Declarations
            HtmlCell uILewandowskiCell = this.UIPustastronaInternetEWindow.UIPlayersCSGODocument.UIItemTable1.UILewandowskiCell;
            #endregion

            // Verify that the 'InnerText' property of 'Lewandowski' cell equals 'Lewandowski '
            Assert.AreEqual(this.AssertSurnameIsChangedExpectedValues.UILewandowskiCellInnerText, uILewandowskiCell.InnerText);
        }
        
        /// <summary>
        /// DeletePlayer
        /// </summary>
        public void DeletePlayer()
        {
            #region Variable Declarations
            HtmlHyperlink uICancelHyperlink = this.UIPustastronaInternetEWindow.UICreateTeamCSGODocument.UICancelHyperlink;
            HtmlHyperlink uIPlayersHyperlink = this.UIPustastronaInternetEWindow.UITeamsCSGODocument.UIPlayersHyperlink;
            HtmlHyperlink uIDeleteHyperlink3 = this.UIPustastronaInternetEWindow.UIPlayersCSGODocument.UIDeleteHyperlink3;
            HtmlInputButton uIDeleteButton = this.UICreateTeamCSGOInternWindow2.UIDeletePlayerCSGODocument.UIDeleteButton;
            #endregion

            // Click 'Cancel' link
            Mouse.Click(uICancelHyperlink, new Point(35, 18));

            // Click 'Players' link
            Mouse.Click(uIPlayersHyperlink, new Point(24, 18));

            // Click 'Delete' link
            Mouse.Click(uIDeleteHyperlink3, new Point(43, 11));

            // Click 'Delete' button
            Mouse.Click(uIDeleteButton, new Point(32, 0));
        }
        
        /// <summary>
        /// AssertDeletePlayerRedirectsToIndex - Use 'AssertDeletePlayerRedirectsToIndexExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertDeletePlayerRedirectsToIndex()
        {
            #region Variable Declarations
            WinEdit uIAdresEdit = this.UIPustastronaInternetEWindow.UIItemWindow.UIPasekadresuClient.UIAdresEdit;
            #endregion

            // Verify that the 'Text' property of 'Adres' text box equals 'http://localhost:5000/Players'
            Assert.AreEqual(this.AssertDeletePlayerRedirectsToIndexExpectedValues.UIAdresEditText, uIAdresEdit.Text);
        }
        
        /// <summary>
        /// ShowTeamDetails
        /// </summary>
        public void ShowTeamDetails()
        {
            #region Variable Declarations
            HtmlHyperlink uITeamsHyperlink = this.UIPustastronaInternetEWindow.UIPlayersCSGODocument.UITeamsHyperlink;
            HtmlHyperlink uIDetailsHyperlink = this.UIPustastronaInternetEWindow.UITeamsCSGODocument.UIDetailsHyperlink;
            #endregion

            // Click 'Teams' link
            Mouse.Click(uITeamsHyperlink, new Point(36, 27));

            // Click 'Details' link
            Mouse.Click(uIDetailsHyperlink, new Point(33, 15));
        }
        
        /// <summary>
        /// AssertBrowserOnTeamDetailsPage - Use 'AssertBrowserOnTeamDetailsPageExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertBrowserOnTeamDetailsPage()
        {
            #region Variable Declarations
            WinEdit uIAdresEdit = this.UITeamDetailsCSGOInterWindow.UIItemWindow.UIPasekadresuClient.UIAdresEdit;
            #endregion

            // Verify that the 'Text' property of 'Adres' text box contains 'http://localhost:5000/Teams/Details/'
            StringAssert.Contains(uIAdresEdit.Text, this.AssertBrowserOnTeamDetailsPageExpectedValues.UIAdresEditText);
        }
        
        /// <summary>
        /// TryToCreateWrongTeam
        /// </summary>
        public void TryToCreateWrongTeam()
        {
            #region Variable Declarations
            HtmlHyperlink uIBackHyperlink = this.UITeamDetailsCSGOInterWindow1.UITeamDetailsCSGODocument.UIBackHyperlink;
            HtmlHyperlink uICreateHyperlink = this.UIPustastronaInternetEWindow.UITeamsCSGODocument.UICreateHyperlink;
            HtmlEdit uITeamnameEdit = this.UIPustastronaInternetEWindow.UICreateTeamCSGODocument.UITeamnameEdit;
            HtmlEdit uIDateoffoundingEdit = this.UIPustastronaInternetEWindow.UICreateTeamCSGODocument.UIDateoffoundingEdit;
            HtmlInputButton uICreateButton = this.UIPustastronaInternetEWindow.UICreateTeamCSGODocument.UICreateButton;
            #endregion

            // Click 'Back' link
            Mouse.Click(uIBackHyperlink, new Point(36, 25));

            // Click 'Create' link
            Mouse.Click(uICreateHyperlink, new Point(27, 21));

            // Click 'Team name' text box
            Mouse.Click(uITeamnameEdit, new Point(67, 32));

            // Click 'Date of founding' text box
            Mouse.Click(uIDateoffoundingEdit, new Point(63, 1));

            // Click 'Create' button
            Mouse.Click(uICreateButton, new Point(45, 12));
        }
        
        /// <summary>
        /// AssertWrongInformationsPreventsFromCreatingTeam - Use 'AssertWrongInformationsPreventsFromCreatingTeamExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertWrongInformationsPreventsFromCreatingTeam()
        {
            #region Variable Declarations
            WinEdit uIAdresEdit = this.UICreateTeamCSGOInternWindow.UIItemWindow.UIPasekadresuClient.UIAdresEdit;
            #endregion

            // Verify that the 'Text' property of 'Adres' text box equals 'http://localhost:5000/Teams/Create'
            Assert.AreEqual(this.AssertWrongInformationsPreventsFromCreatingTeamExpectedValues.UIAdresEditText, uIAdresEdit.Text);
        }
        
        /// <summary>
        /// DeleteTeamAndLogout
        /// </summary>
        public void DeleteTeamAndLogout()
        {
            #region Variable Declarations
            HtmlHyperlink uITeamsHyperlink = this.UIPustastronaInternetEWindow.UIPlayersCSGODocument.UITeamsHyperlink;
            HtmlHyperlink uIDeleteHyperlink2 = this.UIPustastronaInternetEWindow.UITeamsCSGODocument.UIDeleteHyperlink2;
            HtmlInputButton uIDeleteButton = this.UIPlayersCSGOInternetEWindow2.UIDeleteTeamCSGODocument.UIDeleteButton;
            HtmlButton uILogoutButton = this.UIPustastronaInternetEWindow.UITeamsCSGODocument.UILogoutButton;
            #endregion

            // Click 'Teams' link
            Mouse.Click(uITeamsHyperlink, new Point(42, 16));

            // Click 'Delete' link
            Mouse.Click(uIDeleteHyperlink2, new Point(31, 25));

            // Click 'Delete' button
            Mouse.Click(uIDeleteButton, new Point(32, 10));

            // Click 'Log out' button
            Mouse.Click(uILogoutButton, new Point(42, 22));
        }
        
        /// <summary>
        /// AssertLoggedOut - Use 'AssertLoggedOutExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertLoggedOut()
        {
            #region Variable Declarations
            HtmlHyperlink uILoginHyperlink = this.UIPustastronaInternetEWindow.UIMainPageCSGODocument.UILoginHyperlink;
            #endregion

            // Verify that the 'InnerText' property of 'Log in' link equals 'Log in'
            Assert.AreEqual(this.AssertLoggedOutExpectedValues.UILoginHyperlinkInnerText, uILoginHyperlink.InnerText);
        }
        
        #region Properties
        public virtual OpenIEAndGoToMainPageParams OpenIEAndGoToMainPageParams
        {
            get
            {
                if ((this.mOpenIEAndGoToMainPageParams == null))
                {
                    this.mOpenIEAndGoToMainPageParams = new OpenIEAndGoToMainPageParams();
                }
                return this.mOpenIEAndGoToMainPageParams;
            }
        }
        
        public virtual AssertBrowserOnMainPageExpectedValues AssertBrowserOnMainPageExpectedValues
        {
            get
            {
                if ((this.mAssertBrowserOnMainPageExpectedValues == null))
                {
                    this.mAssertBrowserOnMainPageExpectedValues = new AssertBrowserOnMainPageExpectedValues();
                }
                return this.mAssertBrowserOnMainPageExpectedValues;
            }
        }
        
        public virtual LogInAsAdminParams LogInAsAdminParams
        {
            get
            {
                if ((this.mLogInAsAdminParams == null))
                {
                    this.mLogInAsAdminParams = new LogInAsAdminParams();
                }
                return this.mLogInAsAdminParams;
            }
        }
        
        public virtual AssertLoggedAsAdminExpectedValues AssertLoggedAsAdminExpectedValues
        {
            get
            {
                if ((this.mAssertLoggedAsAdminExpectedValues == null))
                {
                    this.mAssertLoggedAsAdminExpectedValues = new AssertLoggedAsAdminExpectedValues();
                }
                return this.mAssertLoggedAsAdminExpectedValues;
            }
        }
        
        public virtual AddTeamAndReturnToHomeParams AddTeamAndReturnToHomeParams
        {
            get
            {
                if ((this.mAddTeamAndReturnToHomeParams == null))
                {
                    this.mAddTeamAndReturnToHomeParams = new AddTeamAndReturnToHomeParams();
                }
                return this.mAddTeamAndReturnToHomeParams;
            }
        }
        
        public virtual CreateTeamParams CreateTeamParams
        {
            get
            {
                if ((this.mCreateTeamParams == null))
                {
                    this.mCreateTeamParams = new CreateTeamParams();
                }
                return this.mCreateTeamParams;
            }
        }
        
        public virtual AssertTeamExistExpectedValues AssertTeamExistExpectedValues
        {
            get
            {
                if ((this.mAssertTeamExistExpectedValues == null))
                {
                    this.mAssertTeamExistExpectedValues = new AssertTeamExistExpectedValues();
                }
                return this.mAssertTeamExistExpectedValues;
            }
        }
        
        public virtual CreatePlayerParams CreatePlayerParams
        {
            get
            {
                if ((this.mCreatePlayerParams == null))
                {
                    this.mCreatePlayerParams = new CreatePlayerParams();
                }
                return this.mCreatePlayerParams;
            }
        }
        
        public virtual AssertPlayerExistsExpectedValues AssertPlayerExistsExpectedValues
        {
            get
            {
                if ((this.mAssertPlayerExistsExpectedValues == null))
                {
                    this.mAssertPlayerExistsExpectedValues = new AssertPlayerExistsExpectedValues();
                }
                return this.mAssertPlayerExistsExpectedValues;
            }
        }
        
        public virtual EditPlayerSurnameParams EditPlayerSurnameParams
        {
            get
            {
                if ((this.mEditPlayerSurnameParams == null))
                {
                    this.mEditPlayerSurnameParams = new EditPlayerSurnameParams();
                }
                return this.mEditPlayerSurnameParams;
            }
        }
        
        public virtual AssertSurnameIsChangedExpectedValues AssertSurnameIsChangedExpectedValues
        {
            get
            {
                if ((this.mAssertSurnameIsChangedExpectedValues == null))
                {
                    this.mAssertSurnameIsChangedExpectedValues = new AssertSurnameIsChangedExpectedValues();
                }
                return this.mAssertSurnameIsChangedExpectedValues;
            }
        }
        
        public virtual AssertDeletePlayerRedirectsToIndexExpectedValues AssertDeletePlayerRedirectsToIndexExpectedValues
        {
            get
            {
                if ((this.mAssertDeletePlayerRedirectsToIndexExpectedValues == null))
                {
                    this.mAssertDeletePlayerRedirectsToIndexExpectedValues = new AssertDeletePlayerRedirectsToIndexExpectedValues();
                }
                return this.mAssertDeletePlayerRedirectsToIndexExpectedValues;
            }
        }
        
        public virtual AssertBrowserOnTeamDetailsPageExpectedValues AssertBrowserOnTeamDetailsPageExpectedValues
        {
            get
            {
                if ((this.mAssertBrowserOnTeamDetailsPageExpectedValues == null))
                {
                    this.mAssertBrowserOnTeamDetailsPageExpectedValues = new AssertBrowserOnTeamDetailsPageExpectedValues();
                }
                return this.mAssertBrowserOnTeamDetailsPageExpectedValues;
            }
        }
        
        public virtual AssertWrongInformationsPreventsFromCreatingTeamExpectedValues AssertWrongInformationsPreventsFromCreatingTeamExpectedValues
        {
            get
            {
                if ((this.mAssertWrongInformationsPreventsFromCreatingTeamExpectedValues == null))
                {
                    this.mAssertWrongInformationsPreventsFromCreatingTeamExpectedValues = new AssertWrongInformationsPreventsFromCreatingTeamExpectedValues();
                }
                return this.mAssertWrongInformationsPreventsFromCreatingTeamExpectedValues;
            }
        }
        
        public virtual AssertLoggedOutExpectedValues AssertLoggedOutExpectedValues
        {
            get
            {
                if ((this.mAssertLoggedOutExpectedValues == null))
                {
                    this.mAssertLoggedOutExpectedValues = new AssertLoggedOutExpectedValues();
                }
                return this.mAssertLoggedOutExpectedValues;
            }
        }
        
        public UIPustastronaInternetEWindow UIPustastronaInternetEWindow
        {
            get
            {
                if ((this.mUIPustastronaInternetEWindow == null))
                {
                    this.mUIPustastronaInternetEWindow = new UIPustastronaInternetEWindow();
                }
                return this.mUIPustastronaInternetEWindow;
            }
        }
        
        public UITeamDetailsCSGOInterWindow UITeamDetailsCSGOInterWindow
        {
            get
            {
                if ((this.mUITeamDetailsCSGOInterWindow == null))
                {
                    this.mUITeamDetailsCSGOInterWindow = new UITeamDetailsCSGOInterWindow();
                }
                return this.mUITeamDetailsCSGOInterWindow;
            }
        }
        
        public UITeamDetailsCSGOInterWindow1 UITeamDetailsCSGOInterWindow1
        {
            get
            {
                if ((this.mUITeamDetailsCSGOInterWindow1 == null))
                {
                    this.mUITeamDetailsCSGOInterWindow1 = new UITeamDetailsCSGOInterWindow1();
                }
                return this.mUITeamDetailsCSGOInterWindow1;
            }
        }
        
        public UICreateTeamCSGOInternWindow UICreateTeamCSGOInternWindow
        {
            get
            {
                if ((this.mUICreateTeamCSGOInternWindow == null))
                {
                    this.mUICreateTeamCSGOInternWindow = new UICreateTeamCSGOInternWindow();
                }
                return this.mUICreateTeamCSGOInternWindow;
            }
        }
        
        public UITeamDetailsCSGOInterWindow2 UITeamDetailsCSGOInterWindow2
        {
            get
            {
                if ((this.mUITeamDetailsCSGOInterWindow2 == null))
                {
                    this.mUITeamDetailsCSGOInterWindow2 = new UITeamDetailsCSGOInterWindow2();
                }
                return this.mUITeamDetailsCSGOInterWindow2;
            }
        }
        
        public UITeamDetailsCSGOInterWindow3 UITeamDetailsCSGOInterWindow3
        {
            get
            {
                if ((this.mUITeamDetailsCSGOInterWindow3 == null))
                {
                    this.mUITeamDetailsCSGOInterWindow3 = new UITeamDetailsCSGOInterWindow3();
                }
                return this.mUITeamDetailsCSGOInterWindow3;
            }
        }
        
        public UIPlayersCSGOInternetEWindow UIPlayersCSGOInternetEWindow
        {
            get
            {
                if ((this.mUIPlayersCSGOInternetEWindow == null))
                {
                    this.mUIPlayersCSGOInternetEWindow = new UIPlayersCSGOInternetEWindow();
                }
                return this.mUIPlayersCSGOInternetEWindow;
            }
        }
        
        public UICreateTeamCSGOInternWindow1 UICreateTeamCSGOInternWindow1
        {
            get
            {
                if ((this.mUICreateTeamCSGOInternWindow1 == null))
                {
                    this.mUICreateTeamCSGOInternWindow1 = new UICreateTeamCSGOInternWindow1();
                }
                return this.mUICreateTeamCSGOInternWindow1;
            }
        }
        
        public UIPlayersCSGOInternetEWindow1 UIPlayersCSGOInternetEWindow1
        {
            get
            {
                if ((this.mUIPlayersCSGOInternetEWindow1 == null))
                {
                    this.mUIPlayersCSGOInternetEWindow1 = new UIPlayersCSGOInternetEWindow1();
                }
                return this.mUIPlayersCSGOInternetEWindow1;
            }
        }
        
        public UICreateTeamCSGOInternWindow2 UICreateTeamCSGOInternWindow2
        {
            get
            {
                if ((this.mUICreateTeamCSGOInternWindow2 == null))
                {
                    this.mUICreateTeamCSGOInternWindow2 = new UICreateTeamCSGOInternWindow2();
                }
                return this.mUICreateTeamCSGOInternWindow2;
            }
        }
        
        public UIPlayersCSGOInternetEWindow2 UIPlayersCSGOInternetEWindow2
        {
            get
            {
                if ((this.mUIPlayersCSGOInternetEWindow2 == null))
                {
                    this.mUIPlayersCSGOInternetEWindow2 = new UIPlayersCSGOInternetEWindow2();
                }
                return this.mUIPlayersCSGOInternetEWindow2;
            }
        }
        #endregion
        
        #region Fields
        private OpenIEAndGoToMainPageParams mOpenIEAndGoToMainPageParams;
        
        private AssertBrowserOnMainPageExpectedValues mAssertBrowserOnMainPageExpectedValues;
        
        private LogInAsAdminParams mLogInAsAdminParams;
        
        private AssertLoggedAsAdminExpectedValues mAssertLoggedAsAdminExpectedValues;
        
        private AddTeamAndReturnToHomeParams mAddTeamAndReturnToHomeParams;
        
        private CreateTeamParams mCreateTeamParams;
        
        private AssertTeamExistExpectedValues mAssertTeamExistExpectedValues;
        
        private CreatePlayerParams mCreatePlayerParams;
        
        private AssertPlayerExistsExpectedValues mAssertPlayerExistsExpectedValues;
        
        private EditPlayerSurnameParams mEditPlayerSurnameParams;
        
        private AssertSurnameIsChangedExpectedValues mAssertSurnameIsChangedExpectedValues;
        
        private AssertDeletePlayerRedirectsToIndexExpectedValues mAssertDeletePlayerRedirectsToIndexExpectedValues;
        
        private AssertBrowserOnTeamDetailsPageExpectedValues mAssertBrowserOnTeamDetailsPageExpectedValues;
        
        private AssertWrongInformationsPreventsFromCreatingTeamExpectedValues mAssertWrongInformationsPreventsFromCreatingTeamExpectedValues;
        
        private AssertLoggedOutExpectedValues mAssertLoggedOutExpectedValues;
        
        private UIPustastronaInternetEWindow mUIPustastronaInternetEWindow;
        
        private UITeamDetailsCSGOInterWindow mUITeamDetailsCSGOInterWindow;
        
        private UITeamDetailsCSGOInterWindow1 mUITeamDetailsCSGOInterWindow1;
        
        private UICreateTeamCSGOInternWindow mUICreateTeamCSGOInternWindow;
        
        private UITeamDetailsCSGOInterWindow2 mUITeamDetailsCSGOInterWindow2;
        
        private UITeamDetailsCSGOInterWindow3 mUITeamDetailsCSGOInterWindow3;
        
        private UIPlayersCSGOInternetEWindow mUIPlayersCSGOInternetEWindow;
        
        private UICreateTeamCSGOInternWindow1 mUICreateTeamCSGOInternWindow1;
        
        private UIPlayersCSGOInternetEWindow1 mUIPlayersCSGOInternetEWindow1;
        
        private UICreateTeamCSGOInternWindow2 mUICreateTeamCSGOInternWindow2;
        
        private UIPlayersCSGOInternetEWindow2 mUIPlayersCSGOInternetEWindow2;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenIEAndGoToMainPage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class OpenIEAndGoToMainPageParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'http://localhost:5000/' using new browser instance
        /// </summary>
        public string UIPustastronaInternetEWindowUrl = "http://localhost:5000/";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertBrowserOnMainPage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertBrowserOnMainPageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Adres' text box equals 'http://localhost:5000/'
        /// </summary>
        public string UIAdresEditText = "http://localhost:5000/";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LogInAsAdmin'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class LogInAsAdminParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'admin@admin.com' in 'Email' text box
        /// </summary>
        public string UIEmailEditText = "admin@admin.com";
        
        /// <summary>
        /// Type '{Tab}' in 'Email' text box
        /// </summary>
        public string UIEmailEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword = "ymzStMd2RS3/EgEE/GGE3ktN8qUA/SBKIT7yZyvoEQk=";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertLoggedAsAdmin'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertLoggedAsAdminExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of custom control equals 'admin'
        /// </summary>
        public string UIItemCustomInnerText = "admin";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddTeamAndReturnToHome'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddTeamAndReturnToHomeParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Testowa' in 'Team name' text box
        /// </summary>
        public string UITeamnameEditText = "Testowa";
        
        /// <summary>
        /// Type '{Tab}' in 'Team name' text box
        /// </summary>
        public string UITeamnameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '11-11-1999' in 'Date of founding' text box
        /// </summary>
        public string UIDateoffoundingEditText = "11-11-1999";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateTeam'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CreateTeamParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Testowa' in 'Team name' text box
        /// </summary>
        public string UITeamnameEditText = "Testowa";
        
        /// <summary>
        /// Type '{Tab}' in 'Team name' text box
        /// </summary>
        public string UITeamnameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '11-11-1999' in 'Date of founding' text box
        /// </summary>
        public string UIDateoffoundingEditText = "11-11-1999";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTeamExist'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertTeamExistExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Testowa' cell equals 'Testowa '
        /// </summary>
        public string UITestowaCellInnerText = "Testowa ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreatePlayer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CreatePlayerParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Janek' in 'Name' text box
        /// </summary>
        public string UINameEditText = "Janek";
        
        /// <summary>
        /// Type '{Tab}' in 'Name' text box
        /// </summary>
        public string UINameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'Hergroth' in 'Surname' text box
        /// </summary>
        public string UISurnameEditText = "Hergroth";
        
        /// <summary>
        /// Type '{Tab}' in 'Surname' text box
        /// </summary>
        public string UISurnameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{LShiftKey}' in 'Nickname' text box
        /// </summary>
        public string UINicknameEditSendKeys = "{LShiftKey}";
        
        /// <summary>
        /// Type 'Bienias' in 'Surname' text box
        /// </summary>
        public string UISurnameEditText1 = "Bienias";
        
        /// <summary>
        /// Type '{Tab}' in 'Surname' text box
        /// </summary>
        public string UISurnameEditSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type 'Hergroth' in 'Nickname' text box
        /// </summary>
        public string UINicknameEditText = "Hergroth";
        
        /// <summary>
        /// Type '{Tab}' in 'Nickname' text box
        /// </summary>
        public string UINicknameEditSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type '2137' in 'Salary' text box
        /// </summary>
        public string UISalaryEditText = "2137";
        
        /// <summary>
        /// Type '{Tab}' in 'Salary' text box
        /// </summary>
        public string UISalaryEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '19-04-1996' in 'Date of birth' text box
        /// </summary>
        public string UIDateofbirthEditText = "19-04-1996";
        
        /// <summary>
        /// Select 'Testowa' in 'Team' combo box
        /// </summary>
        public string UITeamComboBoxSelectedItem = "Testowa";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertPlayerExists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertPlayerExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Hergroth' cell equals 'Hergroth '
        /// </summary>
        public string UIHergrothCellInnerText = "Hergroth ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditPlayerSurname'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EditPlayerSurnameParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Lewandowski' in 'Surname' text box
        /// </summary>
        public string UISurnameEditText = "Lewandowski";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSurnameIsChanged'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertSurnameIsChangedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Lewandowski' cell equals 'Lewandowski '
        /// </summary>
        public string UILewandowskiCellInnerText = "Lewandowski ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertDeletePlayerRedirectsToIndex'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertDeletePlayerRedirectsToIndexExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Adres' text box equals 'http://localhost:5000/Players'
        /// </summary>
        public string UIAdresEditText = "http://localhost:5000/Players";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertBrowserOnTeamDetailsPage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertBrowserOnTeamDetailsPageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Adres' text box contains 'http://localhost:5000/Teams/Details/'
        /// </summary>
        public string UIAdresEditText = "http://localhost:5000/Teams/Details/";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertWrongInformationsPreventsFromCreatingTeam'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertWrongInformationsPreventsFromCreatingTeamExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Adres' text box equals 'http://localhost:5000/Teams/Create'
        /// </summary>
        public string UIAdresEditText = "http://localhost:5000/Teams/Create";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertLoggedOut'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertLoggedOutExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Log in' link equals 'Log in'
        /// </summary>
        public string UILoginHyperlinkInnerText = "Log in";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPustastronaInternetEWindow : BrowserWindow
    {
        
        public UIPustastronaInternetEWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Pusta strona";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Pusta strona");
            this.WindowTitles.Add("Main Page - CSGO");
            this.WindowTitles.Add("Log in - CSGO");
            this.WindowTitles.Add("Teams - CSGO");
            this.WindowTitles.Add("Create Team - CSGO");
            this.WindowTitles.Add("Players - CSGO");
            this.WindowTitles.Add("Create Player - CSGO");
            this.WindowTitles.Add("Edit Player - CSGO");
            this.WindowTitles.Add("Delete Player - CSGO");
            this.WindowTitles.Add("Team Details - CSGO");
            this.WindowTitles.Add("Delete Team - CSGO");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIMainPageCSGODocument UIMainPageCSGODocument
        {
            get
            {
                if ((this.mUIMainPageCSGODocument == null))
                {
                    this.mUIMainPageCSGODocument = new UIMainPageCSGODocument(this);
                }
                return this.mUIMainPageCSGODocument;
            }
        }
        
        public UILoginCSGODocument UILoginCSGODocument
        {
            get
            {
                if ((this.mUILoginCSGODocument == null))
                {
                    this.mUILoginCSGODocument = new UILoginCSGODocument(this);
                }
                return this.mUILoginCSGODocument;
            }
        }
        
        public UITeamsCSGODocument UITeamsCSGODocument
        {
            get
            {
                if ((this.mUITeamsCSGODocument == null))
                {
                    this.mUITeamsCSGODocument = new UITeamsCSGODocument(this);
                }
                return this.mUITeamsCSGODocument;
            }
        }
        
        public UICreateTeamCSGODocument UICreateTeamCSGODocument
        {
            get
            {
                if ((this.mUICreateTeamCSGODocument == null))
                {
                    this.mUICreateTeamCSGODocument = new UICreateTeamCSGODocument(this);
                }
                return this.mUICreateTeamCSGODocument;
            }
        }
        
        public UIPlayersCSGODocument UIPlayersCSGODocument
        {
            get
            {
                if ((this.mUIPlayersCSGODocument == null))
                {
                    this.mUIPlayersCSGODocument = new UIPlayersCSGODocument(this);
                }
                return this.mUIPlayersCSGODocument;
            }
        }
        
        public UICreatePlayerCSGODocument UICreatePlayerCSGODocument
        {
            get
            {
                if ((this.mUICreatePlayerCSGODocument == null))
                {
                    this.mUICreatePlayerCSGODocument = new UICreatePlayerCSGODocument(this);
                }
                return this.mUICreatePlayerCSGODocument;
            }
        }
        
        public UIEditPlayerCSGODocument UIEditPlayerCSGODocument
        {
            get
            {
                if ((this.mUIEditPlayerCSGODocument == null))
                {
                    this.mUIEditPlayerCSGODocument = new UIEditPlayerCSGODocument(this);
                }
                return this.mUIEditPlayerCSGODocument;
            }
        }
        
        public UIDeletePlayerCSGODocument UIDeletePlayerCSGODocument
        {
            get
            {
                if ((this.mUIDeletePlayerCSGODocument == null))
                {
                    this.mUIDeletePlayerCSGODocument = new UIDeletePlayerCSGODocument(this);
                }
                return this.mUIDeletePlayerCSGODocument;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIMainPageCSGODocument mUIMainPageCSGODocument;
        
        private UILoginCSGODocument mUILoginCSGODocument;
        
        private UITeamsCSGODocument mUITeamsCSGODocument;
        
        private UICreateTeamCSGODocument mUICreateTeamCSGODocument;
        
        private UIPlayersCSGODocument mUIPlayersCSGODocument;
        
        private UICreatePlayerCSGODocument mUICreatePlayerCSGODocument;
        
        private UIEditPlayerCSGODocument mUIEditPlayerCSGODocument;
        
        private UIDeletePlayerCSGODocument mUIDeletePlayerCSGODocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "AddressDisplay Control";
            this.WindowTitles.Add("Main Page - CSGO");
            #endregion
        }
        
        #region Properties
        public UIPasekadresuClient UIPasekadresuClient
        {
            get
            {
                if ((this.mUIPasekadresuClient == null))
                {
                    this.mUIPasekadresuClient = new UIPasekadresuClient(this);
                }
                return this.mUIPasekadresuClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPasekadresuClient mUIPasekadresuClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPasekadresuClient : WinClient
    {
        
        public UIPasekadresuClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Main Page - CSGO");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAdresEdit
        {
            get
            {
                if ((this.mUIAdresEdit == null))
                {
                    this.mUIAdresEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAdresEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Adres";
                    this.mUIAdresEdit.WindowTitles.Add("Main Page - CSGO");
                    #endregion
                }
                return this.mUIAdresEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAdresEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMainPageCSGODocument : HtmlDocument
    {
        
        public UIMainPageCSGODocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Main Page - CSGO";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/";
            this.WindowTitles.Add("Main Page - CSGO");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UILoginHyperlink
        {
            get
            {
                if ((this.mUILoginHyperlink == null))
                {
                    this.mUILoginHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "login_link";
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Log in";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Account/Login";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Account/Login";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=\"login_link\" href=\"/Account/Login\"";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "5";
                    this.mUILoginHyperlink.WindowTitles.Add("Main Page - CSGO");
                    #endregion
                }
                return this.mUILoginHyperlink;
            }
        }
        
        public UIWelcomeadministratorHyperlink UIWelcomeadministratorHyperlink
        {
            get
            {
                if ((this.mUIWelcomeadministratorHyperlink == null))
                {
                    this.mUIWelcomeadministratorHyperlink = new UIWelcomeadministratorHyperlink(this);
                }
                return this.mUIWelcomeadministratorHyperlink;
            }
        }
        
        public HtmlDiv UICheckoutmainCSGOsitePane
        {
            get
            {
                if ((this.mUICheckoutmainCSGOsitePane == null))
                {
                    this.mUICheckoutmainCSGOsitePane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUICheckoutmainCSGOsitePane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUICheckoutmainCSGOsitePane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUICheckoutmainCSGOsitePane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Check out main CSGO site for updates dir";
                    this.mUICheckoutmainCSGOsitePane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUICheckoutmainCSGOsitePane.FilterProperties[HtmlDiv.PropertyNames.Class] = "container body-content";
                    this.mUICheckoutmainCSGOsitePane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"container body-content\"";
                    this.mUICheckoutmainCSGOsitePane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "4";
                    this.mUICheckoutmainCSGOsitePane.WindowTitles.Add("Main Page - CSGO");
                    #endregion
                }
                return this.mUICheckoutmainCSGOsitePane;
            }
        }
        
        public HtmlHyperlink UITeamsHyperlink
        {
            get
            {
                if ((this.mUITeamsHyperlink == null))
                {
                    this.mUITeamsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUITeamsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "teams";
                    this.mUITeamsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUITeamsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUITeamsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Teams";
                    this.mUITeamsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Teams";
                    this.mUITeamsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUITeamsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Teams";
                    this.mUITeamsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUITeamsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=\"teams\" href=\"/Teams\"";
                    this.mUITeamsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUITeamsHyperlink.WindowTitles.Add("Main Page - CSGO");
                    #endregion
                }
                return this.mUITeamsHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUILoginHyperlink;
        
        private UIWelcomeadministratorHyperlink mUIWelcomeadministratorHyperlink;
        
        private HtmlDiv mUICheckoutmainCSGOsitePane;
        
        private HtmlHyperlink mUITeamsHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIWelcomeadministratorHyperlink : HtmlHyperlink
    {
        
        public UIWelcomeadministratorHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "logged_user";
            this.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
            this.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
            this.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Welcome administrator - admin ";
            this.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Manage/Index";
            this.FilterProperties[HtmlHyperlink.PropertyNames.Title] = "Manage";
            this.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Manage/Index";
            this.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
            this.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "title=\"Manage\" id=\"logged_user\" href=\"/M";
            this.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "6";
            this.WindowTitles.Add("Main Page - CSGO");
            #endregion
        }
        
        #region Properties
        public HtmlCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom.SearchProperties["TagName"] = "email";
                    this.mUIItemCustom.SearchProperties["Id"] = null;
                    this.mUIItemCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIItemCustom.FilterProperties["Class"] = null;
                    this.mUIItemCustom.FilterProperties["ControlDefinition"] = null;
                    this.mUIItemCustom.FilterProperties["TagInstance"] = "1";
                    this.mUIItemCustom.WindowTitles.Add("Main Page - CSGO");
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCustom mUIItemCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginCSGODocument : HtmlDocument
    {
        
        public UILoginCSGODocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Log in - CSGO";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Account/Login";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Account/Login";
            this.WindowTitles.Add("Log in - CSGO");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIEmailEdit
        {
            get
            {
                if ((this.mUIEmailEdit == null))
                {
                    this.mUIEmailEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIEmailEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Email";
                    this.mUIEmailEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Email";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Email";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Email\" class=\"form-control\" id=\"Em";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUIEmailEdit.WindowTitles.Add("Log in - CSGO");
                    #endregion
                }
                return this.mUIEmailEdit;
            }
        }
        
        public HtmlEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Password";
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Password\" class=\"form-control\" id=";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIPasswordEdit.WindowTitles.Add("Log in - CSGO");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        
        public HtmlButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Log in";
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-default";
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" type=\"submit\"";
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "2";
                    this.mUILoginButton.WindowTitles.Add("Log in - CSGO");
                    #endregion
                }
                return this.mUILoginButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIEmailEdit;
        
        private HtmlEdit mUIPasswordEdit;
        
        private HtmlButton mUILoginButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITeamsCSGODocument : HtmlDocument
    {
        
        public UITeamsCSGODocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Teams - CSGO";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Teams";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Teams";
            this.WindowTitles.Add("Teams - CSGO");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UICreateHyperlink
        {
            get
            {
                if ((this.mUICreateHyperlink == null))
                {
                    this.mUICreateHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUICreateHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "create_team";
                    this.mUICreateHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUICreateHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUICreateHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Create";
                    this.mUICreateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Teams/Create";
                    this.mUICreateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUICreateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Teams/Create";
                    this.mUICreateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "btn btn-sm btn-success";
                    this.mUICreateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"btn btn-sm btn-success\" id=\"creat";
                    this.mUICreateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "8";
                    this.mUICreateHyperlink.WindowTitles.Add("Teams - CSGO");
                    #endregion
                }
                return this.mUICreateHyperlink;
            }
        }
        
        public HtmlHyperlink UICSGOHyperlink
        {
            get
            {
                if ((this.mUICSGOHyperlink == null))
                {
                    this.mUICSGOHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUICSGOHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUICSGOHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUICSGOHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUICSGOHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "CSGO";
                    this.mUICSGOHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/";
                    this.mUICSGOHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUICSGOHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/";
                    this.mUICSGOHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "navbar-brand";
                    this.mUICSGOHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"navbar-brand\" href=\"/\"";
                    this.mUICSGOHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUICSGOHyperlink.WindowTitles.Add("Teams - CSGO");
                    #endregion
                }
                return this.mUICSGOHyperlink;
            }
        }
        
        public UIItemTable UIItemTable
        {
            get
            {
                if ((this.mUIItemTable == null))
                {
                    this.mUIItemTable = new UIItemTable(this);
                }
                return this.mUIItemTable;
            }
        }
        
        public HtmlHyperlink UIPlayersHyperlink
        {
            get
            {
                if ((this.mUIPlayersHyperlink == null))
                {
                    this.mUIPlayersHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIPlayersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "players";
                    this.mUIPlayersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIPlayersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIPlayersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Players";
                    this.mUIPlayersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Players";
                    this.mUIPlayersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIPlayersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Players";
                    this.mUIPlayersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIPlayersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=\"players\" href=\"/Players\"";
                    this.mUIPlayersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIPlayersHyperlink.WindowTitles.Add("Teams - CSGO");
                    #endregion
                }
                return this.mUIPlayersHyperlink;
            }
        }
        
        public HtmlHyperlink UIDetailsHyperlink
        {
            get
            {
                if ((this.mUIDetailsHyperlink == null))
                {
                    this.mUIDetailsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "details_team";
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Details";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Teams/Details/3070";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Teams/Details/3070";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "btn btn-sm btn-info";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"btn btn-sm btn-info\" id=\"details_";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "18";
                    this.mUIDetailsHyperlink.WindowTitles.Add("Teams - CSGO");
                    #endregion
                }
                return this.mUIDetailsHyperlink;
            }
        }
        
        public HtmlHyperlink UIDeleteHyperlink
        {
            get
            {
                if ((this.mUIDeleteHyperlink == null))
                {
                    this.mUIDeleteHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "delete_team";
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Teams/Delete/3073";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Teams/Delete/3073";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "btn btn-sm btn-danger";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"btn btn-sm btn-danger\" id=\"delete";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "12";
                    this.mUIDeleteHyperlink.WindowTitles.Add("Teams - CSGO");
                    #endregion
                }
                return this.mUIDeleteHyperlink;
            }
        }
        
        public HtmlButton UILogoutButton
        {
            get
            {
                if ((this.mUILogoutButton == null))
                {
                    this.mUILogoutButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.Id] = "logout_btn";
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Log out";
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-link navbar-btn navbar-link";
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-link navbar-btn navbar-li";
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "2";
                    this.mUILogoutButton.WindowTitles.Add("Teams - CSGO");
                    #endregion
                }
                return this.mUILogoutButton;
            }
        }
        
        public HtmlHyperlink UIDeleteHyperlink1
        {
            get
            {
                if ((this.mUIDeleteHyperlink1 == null))
                {
                    this.mUIDeleteHyperlink1 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "delete_team";
                    this.mUIDeleteHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete";
                    this.mUIDeleteHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Teams/Delete/3074";
                    this.mUIDeleteHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Teams/Delete/3074";
                    this.mUIDeleteHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "btn btn-sm btn-danger";
                    this.mUIDeleteHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"btn btn-sm btn-danger\" id=\"delete";
                    this.mUIDeleteHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "12";
                    this.mUIDeleteHyperlink1.WindowTitles.Add("Teams - CSGO");
                    #endregion
                }
                return this.mUIDeleteHyperlink1;
            }
        }
        
        public HtmlHyperlink UIDeleteHyperlink2
        {
            get
            {
                if ((this.mUIDeleteHyperlink2 == null))
                {
                    this.mUIDeleteHyperlink2 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "delete_team";
                    this.mUIDeleteHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete";
                    this.mUIDeleteHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Teams/Delete/3083";
                    this.mUIDeleteHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Teams/Delete/3083";
                    this.mUIDeleteHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "btn btn-sm btn-danger";
                    this.mUIDeleteHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"btn btn-sm btn-danger\" id=\"delete";
                    this.mUIDeleteHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "12";
                    this.mUIDeleteHyperlink2.WindowTitles.Add("Teams - CSGO");
                    #endregion
                }
                return this.mUIDeleteHyperlink2;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUICreateHyperlink;
        
        private HtmlHyperlink mUICSGOHyperlink;
        
        private UIItemTable mUIItemTable;
        
        private HtmlHyperlink mUIPlayersHyperlink;
        
        private HtmlHyperlink mUIDetailsHyperlink;
        
        private HtmlHyperlink mUIDeleteHyperlink;
        
        private HtmlButton mUILogoutButton;
        
        private HtmlHyperlink mUIDeleteHyperlink1;
        
        private HtmlHyperlink mUIDeleteHyperlink2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemTable : HtmlTable
    {
        
        public UIItemTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = null;
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "Team name \r\n\r\nDate of founding \r\n\r\nPlaye";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "class=\"table\"";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "2";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "4";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "table";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("Teams - CSGO");
            #endregion
        }
        
        #region Properties
        public HtmlCell UITestowaCell
        {
            get
            {
                if ((this.mUITestowaCell == null))
                {
                    this.mUITestowaCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUITestowaCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUITestowaCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUITestowaCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUITestowaCell.SearchProperties[HtmlCell.PropertyNames.InnerText] = "Testowa ";
                    this.mUITestowaCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = null;
                    this.mUITestowaCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "1";
                    this.mUITestowaCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "0";
                    this.mUITestowaCell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUITestowaCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "1";
                    this.mUITestowaCell.WindowTitles.Add("Teams - CSGO");
                    #endregion
                }
                return this.mUITestowaCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUITestowaCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICreateTeamCSGODocument : HtmlDocument
    {
        
        public UICreateTeamCSGODocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Create Team - CSGO";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Teams/Create";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Teams/Create";
            this.WindowTitles.Add("Create Team - CSGO");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UITeamnameEdit
        {
            get
            {
                if ((this.mUITeamnameEdit == null))
                {
                    this.mUITeamnameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUITeamnameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Name";
                    this.mUITeamnameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Name";
                    this.mUITeamnameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Team name";
                    this.mUITeamnameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUITeamnameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUITeamnameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUITeamnameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Name\" class=\"form-control\" id=\"Nam";
                    this.mUITeamnameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUITeamnameEdit.WindowTitles.Add("Create Team - CSGO");
                    #endregion
                }
                return this.mUITeamnameEdit;
            }
        }
        
        public HtmlEdit UIDateoffoundingEdit
        {
            get
            {
                if ((this.mUIDateoffoundingEdit == null))
                {
                    this.mUIDateoffoundingEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIDateoffoundingEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "DateOfFounding";
                    this.mUIDateoffoundingEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "DateOfFounding";
                    this.mUIDateoffoundingEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Date of founding";
                    this.mUIDateoffoundingEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIDateoffoundingEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIDateoffoundingEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIDateoffoundingEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"DateOfFounding\" class=\"form-contro";
                    this.mUIDateoffoundingEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIDateoffoundingEdit.WindowTitles.Add("Create Team - CSGO");
                    #endregion
                }
                return this.mUIDateoffoundingEdit;
            }
        }
        
        public HtmlInputButton UICreateButton
        {
            get
            {
                if ((this.mUICreateButton == null))
                {
                    this.mUICreateButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Id] = "create_team";
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Create";
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-success";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-success\" id=\"create_team\"";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "4";
                    this.mUICreateButton.WindowTitles.Add("Create Team - CSGO");
                    #endregion
                }
                return this.mUICreateButton;
            }
        }
        
        public HtmlDiv UITeamnamePane
        {
            get
            {
                if ((this.mUITeamnamePane == null))
                {
                    this.mUITeamnamePane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUITeamnamePane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUITeamnamePane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUITeamnamePane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Team name  ";
                    this.mUITeamnamePane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUITeamnamePane.FilterProperties[HtmlDiv.PropertyNames.Class] = "form-group";
                    this.mUITeamnamePane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"form-group\"";
                    this.mUITeamnamePane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "7";
                    this.mUITeamnamePane.WindowTitles.Add("Create Team - CSGO");
                    #endregion
                }
                return this.mUITeamnamePane;
            }
        }
        
        public HtmlHyperlink UIPlayersHyperlink
        {
            get
            {
                if ((this.mUIPlayersHyperlink == null))
                {
                    this.mUIPlayersHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIPlayersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "players";
                    this.mUIPlayersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIPlayersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIPlayersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Players";
                    this.mUIPlayersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Players";
                    this.mUIPlayersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIPlayersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Players";
                    this.mUIPlayersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIPlayersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=\"players\" href=\"/Players\"";
                    this.mUIPlayersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIPlayersHyperlink.WindowTitles.Add("Create Team - CSGO");
                    #endregion
                }
                return this.mUIPlayersHyperlink;
            }
        }
        
        public HtmlHyperlink UICancelHyperlink
        {
            get
            {
                if ((this.mUICancelHyperlink == null))
                {
                    this.mUICancelHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUICancelHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "cancel_create_team";
                    this.mUICancelHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUICancelHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUICancelHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Cancel";
                    this.mUICancelHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Teams";
                    this.mUICancelHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUICancelHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Teams";
                    this.mUICancelHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "btn btn-default";
                    this.mUICancelHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" id=\"cancel_creat";
                    this.mUICancelHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUICancelHyperlink.WindowTitles.Add("Create Team - CSGO");
                    #endregion
                }
                return this.mUICancelHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUITeamnameEdit;
        
        private HtmlEdit mUIDateoffoundingEdit;
        
        private HtmlInputButton mUICreateButton;
        
        private HtmlDiv mUITeamnamePane;
        
        private HtmlHyperlink mUIPlayersHyperlink;
        
        private HtmlHyperlink mUICancelHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPlayersCSGODocument : HtmlDocument
    {
        
        public UIPlayersCSGODocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Players - CSGO";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Players";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Players";
            this.WindowTitles.Add("Players - CSGO");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UICreateHyperlink
        {
            get
            {
                if ((this.mUICreateHyperlink == null))
                {
                    this.mUICreateHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUICreateHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "create_player";
                    this.mUICreateHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUICreateHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUICreateHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Create";
                    this.mUICreateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Players/Create";
                    this.mUICreateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUICreateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Players/Create";
                    this.mUICreateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "btn btn-sm btn-success";
                    this.mUICreateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"btn btn-sm btn-success\" id=\"creat";
                    this.mUICreateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "8";
                    this.mUICreateHyperlink.WindowTitles.Add("Players - CSGO");
                    #endregion
                }
                return this.mUICreateHyperlink;
            }
        }
        
        public UIItemTable1 UIItemTable
        {
            get
            {
                if ((this.mUIItemTable == null))
                {
                    this.mUIItemTable = new UIItemTable1(this);
                }
                return this.mUIItemTable;
            }
        }
        
        public HtmlHyperlink UIEditHyperlink
        {
            get
            {
                if ((this.mUIEditHyperlink == null))
                {
                    this.mUIEditHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "edit_player";
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Edit";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Players/Edit/3008";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Players/Edit/3008";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "btn btn-sm btn-warning";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"btn btn-sm btn-warning\" id=\"edit_";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "10";
                    this.mUIEditHyperlink.WindowTitles.Add("Players - CSGO");
                    #endregion
                }
                return this.mUIEditHyperlink;
            }
        }
        
        public UIItemTable11 UIItemTable1
        {
            get
            {
                if ((this.mUIItemTable1 == null))
                {
                    this.mUIItemTable1 = new UIItemTable11(this);
                }
                return this.mUIItemTable1;
            }
        }
        
        public HtmlHyperlink UIDeleteHyperlink
        {
            get
            {
                if ((this.mUIDeleteHyperlink == null))
                {
                    this.mUIDeleteHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "delete_player";
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Players/Delete/3008";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Players/Delete/3008";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "btn btn-sm btn-danger";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"btn btn-sm btn-danger\" id=\"delete";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "11";
                    this.mUIDeleteHyperlink.WindowTitles.Add("Players - CSGO");
                    #endregion
                }
                return this.mUIDeleteHyperlink;
            }
        }
        
        public HtmlHyperlink UITeamsHyperlink
        {
            get
            {
                if ((this.mUITeamsHyperlink == null))
                {
                    this.mUITeamsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUITeamsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "teams";
                    this.mUITeamsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUITeamsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUITeamsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Teams";
                    this.mUITeamsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Teams";
                    this.mUITeamsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUITeamsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Teams";
                    this.mUITeamsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUITeamsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=\"teams\" href=\"/Teams\"";
                    this.mUITeamsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUITeamsHyperlink.WindowTitles.Add("Players - CSGO");
                    #endregion
                }
                return this.mUITeamsHyperlink;
            }
        }
        
        public HtmlHyperlink UIDeleteHyperlink1
        {
            get
            {
                if ((this.mUIDeleteHyperlink1 == null))
                {
                    this.mUIDeleteHyperlink1 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "delete_player";
                    this.mUIDeleteHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete";
                    this.mUIDeleteHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Players/Delete/3016";
                    this.mUIDeleteHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Players/Delete/3016";
                    this.mUIDeleteHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "btn btn-sm btn-danger";
                    this.mUIDeleteHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"btn btn-sm btn-danger\" id=\"delete";
                    this.mUIDeleteHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "11";
                    this.mUIDeleteHyperlink1.WindowTitles.Add("Players - CSGO");
                    #endregion
                }
                return this.mUIDeleteHyperlink1;
            }
        }
        
        public HtmlHyperlink UIDeleteHyperlink2
        {
            get
            {
                if ((this.mUIDeleteHyperlink2 == null))
                {
                    this.mUIDeleteHyperlink2 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "delete_player";
                    this.mUIDeleteHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete";
                    this.mUIDeleteHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Players/Delete/3017";
                    this.mUIDeleteHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Players/Delete/3017";
                    this.mUIDeleteHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "btn btn-sm btn-danger";
                    this.mUIDeleteHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"btn btn-sm btn-danger\" id=\"delete";
                    this.mUIDeleteHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "11";
                    this.mUIDeleteHyperlink2.WindowTitles.Add("Players - CSGO");
                    #endregion
                }
                return this.mUIDeleteHyperlink2;
            }
        }
        
        public HtmlHyperlink UIDeleteHyperlink3
        {
            get
            {
                if ((this.mUIDeleteHyperlink3 == null))
                {
                    this.mUIDeleteHyperlink3 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteHyperlink3.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "delete_player";
                    this.mUIDeleteHyperlink3.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteHyperlink3.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteHyperlink3.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete";
                    this.mUIDeleteHyperlink3.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Players/Delete/3025";
                    this.mUIDeleteHyperlink3.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteHyperlink3.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Players/Delete/3025";
                    this.mUIDeleteHyperlink3.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "btn btn-sm btn-danger";
                    this.mUIDeleteHyperlink3.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"btn btn-sm btn-danger\" id=\"delete";
                    this.mUIDeleteHyperlink3.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "11";
                    this.mUIDeleteHyperlink3.WindowTitles.Add("Players - CSGO");
                    #endregion
                }
                return this.mUIDeleteHyperlink3;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUICreateHyperlink;
        
        private UIItemTable1 mUIItemTable;
        
        private HtmlHyperlink mUIEditHyperlink;
        
        private UIItemTable11 mUIItemTable1;
        
        private HtmlHyperlink mUIDeleteHyperlink;
        
        private HtmlHyperlink mUITeamsHyperlink;
        
        private HtmlHyperlink mUIDeleteHyperlink1;
        
        private HtmlHyperlink mUIDeleteHyperlink2;
        
        private HtmlHyperlink mUIDeleteHyperlink3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemTable1 : HtmlTable
    {
        
        public UIItemTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = null;
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "Name \r\n\r\nSurname \r\n\r\nNickname \r\n\r\nSalary";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "class=\"table\"";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "2";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "7";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "table";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("Players - CSGO");
            #endregion
        }
        
        #region Properties
        public HtmlCell UIHergrothCell
        {
            get
            {
                if ((this.mUIHergrothCell == null))
                {
                    this.mUIHergrothCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIHergrothCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUIHergrothCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUIHergrothCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIHergrothCell.SearchProperties[HtmlCell.PropertyNames.InnerText] = "Hergroth ";
                    this.mUIHergrothCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = null;
                    this.mUIHergrothCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "1";
                    this.mUIHergrothCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "2";
                    this.mUIHergrothCell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUIHergrothCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "3";
                    this.mUIHergrothCell.WindowTitles.Add("Players - CSGO");
                    #endregion
                }
                return this.mUIHergrothCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUIHergrothCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemTable11 : HtmlTable
    {
        
        public UIItemTable11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = null;
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "Name \r\n\r\nSurname \r\n\r\nNickname \r\n\r\nSalary";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "class=\"table\"";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "3";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "7";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "table";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("Players - CSGO");
            #endregion
        }
        
        #region Properties
        public HtmlCell UILewandowskiCell
        {
            get
            {
                if ((this.mUILewandowskiCell == null))
                {
                    this.mUILewandowskiCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUILewandowskiCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUILewandowskiCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUILewandowskiCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUILewandowskiCell.SearchProperties[HtmlCell.PropertyNames.InnerText] = "Lewandowski ";
                    this.mUILewandowskiCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = null;
                    this.mUILewandowskiCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "1";
                    this.mUILewandowskiCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "1";
                    this.mUILewandowskiCell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUILewandowskiCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "2";
                    this.mUILewandowskiCell.WindowTitles.Add("Players - CSGO");
                    #endregion
                }
                return this.mUILewandowskiCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUILewandowskiCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICreatePlayerCSGODocument : HtmlDocument
    {
        
        public UICreatePlayerCSGODocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Create Player - CSGO";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Players/Create";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Players/Create";
            this.WindowTitles.Add("Create Player - CSGO");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Name";
                    this.mUINameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Name";
                    this.mUINameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUINameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUINameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUINameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Name\" class=\"form-control\" id=\"Nam";
                    this.mUINameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUINameEdit.WindowTitles.Add("Create Player - CSGO");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        
        public HtmlEdit UISurnameEdit
        {
            get
            {
                if ((this.mUISurnameEdit == null))
                {
                    this.mUISurnameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUISurnameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Surname";
                    this.mUISurnameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Surname";
                    this.mUISurnameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Surname";
                    this.mUISurnameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUISurnameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUISurnameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUISurnameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Surname\" class=\"form-control\" id=\"";
                    this.mUISurnameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUISurnameEdit.WindowTitles.Add("Create Player - CSGO");
                    #endregion
                }
                return this.mUISurnameEdit;
            }
        }
        
        public HtmlEdit UINicknameEdit
        {
            get
            {
                if ((this.mUINicknameEdit == null))
                {
                    this.mUINicknameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUINicknameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Nickname";
                    this.mUINicknameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Nickname";
                    this.mUINicknameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Nickname";
                    this.mUINicknameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUINicknameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUINicknameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUINicknameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Nickname\" class=\"form-control\" id=";
                    this.mUINicknameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "4";
                    this.mUINicknameEdit.WindowTitles.Add("Create Player - CSGO");
                    #endregion
                }
                return this.mUINicknameEdit;
            }
        }
        
        public HtmlEdit UISalaryEdit
        {
            get
            {
                if ((this.mUISalaryEdit == null))
                {
                    this.mUISalaryEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUISalaryEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Salary";
                    this.mUISalaryEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Salary";
                    this.mUISalaryEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Salary";
                    this.mUISalaryEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUISalaryEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUISalaryEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUISalaryEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Salary\" class=\"form-control\" id=\"S";
                    this.mUISalaryEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "5";
                    this.mUISalaryEdit.WindowTitles.Add("Create Player - CSGO");
                    #endregion
                }
                return this.mUISalaryEdit;
            }
        }
        
        public HtmlEdit UIDateofbirthEdit
        {
            get
            {
                if ((this.mUIDateofbirthEdit == null))
                {
                    this.mUIDateofbirthEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIDateofbirthEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "DateOfBirth";
                    this.mUIDateofbirthEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "DateOfBirth";
                    this.mUIDateofbirthEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Date of birth";
                    this.mUIDateofbirthEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIDateofbirthEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIDateofbirthEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIDateofbirthEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"DateOfBirth\" class=\"form-control\" ";
                    this.mUIDateofbirthEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUIDateofbirthEdit.WindowTitles.Add("Create Player - CSGO");
                    #endregion
                }
                return this.mUIDateofbirthEdit;
            }
        }
        
        public HtmlComboBox UITeamComboBox
        {
            get
            {
                if ((this.mUITeamComboBox == null))
                {
                    this.mUITeamComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUITeamComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "TeamId";
                    this.mUITeamComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "TeamId";
                    this.mUITeamComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Team";
                    this.mUITeamComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUITeamComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUITeamComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "2";
                    this.mUITeamComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = "form-control";
                    this.mUITeamComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "name=\"TeamId\" class=\"form-control\" id=\"T";
                    this.mUITeamComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "1";
                    this.mUITeamComboBox.WindowTitles.Add("Create Player - CSGO");
                    #endregion
                }
                return this.mUITeamComboBox;
            }
        }
        
        public HtmlInputButton UICreateButton
        {
            get
            {
                if ((this.mUICreateButton == null))
                {
                    this.mUICreateButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Id] = "create_player";
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Create";
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-success";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-success\" id=\"create_playe";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "7";
                    this.mUICreateButton.WindowTitles.Add("Create Player - CSGO");
                    #endregion
                }
                return this.mUICreateButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUINameEdit;
        
        private HtmlEdit mUISurnameEdit;
        
        private HtmlEdit mUINicknameEdit;
        
        private HtmlEdit mUISalaryEdit;
        
        private HtmlEdit mUIDateofbirthEdit;
        
        private HtmlComboBox mUITeamComboBox;
        
        private HtmlInputButton mUICreateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEditPlayerCSGODocument : HtmlDocument
    {
        
        public UIEditPlayerCSGODocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Edit Player - CSGO";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Players/Edit/3008";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Players/Edit/3008";
            this.WindowTitles.Add("Edit Player - CSGO");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UISurnameEdit
        {
            get
            {
                if ((this.mUISurnameEdit == null))
                {
                    this.mUISurnameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUISurnameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Surname";
                    this.mUISurnameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Surname";
                    this.mUISurnameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Surname";
                    this.mUISurnameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUISurnameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUISurnameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUISurnameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Surname\" class=\"form-control\" id=\"";
                    this.mUISurnameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "4";
                    this.mUISurnameEdit.WindowTitles.Add("Edit Player - CSGO");
                    #endregion
                }
                return this.mUISurnameEdit;
            }
        }
        
        public HtmlInputButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Save";
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-success";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-success\" type=\"submit\" va";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "8";
                    this.mUISaveButton.WindowTitles.Add("Edit Player - CSGO");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUISurnameEdit;
        
        private HtmlInputButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDeletePlayerCSGODocument : HtmlDocument
    {
        
        public UIDeletePlayerCSGODocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete Player - CSGO";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Players/Delete/3008";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Players/Delete/3008";
            this.WindowTitles.Add("Delete Player - CSGO");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = "delete_player";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-danger";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-danger\" id=\"delete_player";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "3";
                    this.mUIDeleteButton.WindowTitles.Add("Delete Player - CSGO");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITeamDetailsCSGOInterWindow : BrowserWindow
    {
        
        public UITeamDetailsCSGOInterWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Team Details - CSGO";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Team Details - CSGO");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "AddressDisplay Control";
            this.WindowTitles.Add("Team Details - CSGO");
            #endregion
        }
        
        #region Properties
        public UIPasekadresuClient1 UIPasekadresuClient
        {
            get
            {
                if ((this.mUIPasekadresuClient == null))
                {
                    this.mUIPasekadresuClient = new UIPasekadresuClient1(this);
                }
                return this.mUIPasekadresuClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPasekadresuClient1 mUIPasekadresuClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPasekadresuClient1 : WinClient
    {
        
        public UIPasekadresuClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Team Details - CSGO");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAdresEdit
        {
            get
            {
                if ((this.mUIAdresEdit == null))
                {
                    this.mUIAdresEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAdresEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Adres";
                    this.mUIAdresEdit.WindowTitles.Add("Team Details - CSGO");
                    #endregion
                }
                return this.mUIAdresEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAdresEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITeamDetailsCSGOInterWindow1 : BrowserWindow
    {
        
        public UITeamDetailsCSGOInterWindow1()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Team Details - CSGO";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Team Details - CSGO");
            this.WindowTitles.Add("Teams - CSGO");
            this.WindowTitles.Add("Create Team - CSGO");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UITeamDetailsCSGODocument UITeamDetailsCSGODocument
        {
            get
            {
                if ((this.mUITeamDetailsCSGODocument == null))
                {
                    this.mUITeamDetailsCSGODocument = new UITeamDetailsCSGODocument(this);
                }
                return this.mUITeamDetailsCSGODocument;
            }
        }
        #endregion
        
        #region Fields
        private UITeamDetailsCSGODocument mUITeamDetailsCSGODocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITeamDetailsCSGODocument : HtmlDocument
    {
        
        public UITeamDetailsCSGODocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Team Details - CSGO";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Teams/Details/3069";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Teams/Details/3069";
            this.WindowTitles.Add("Team Details - CSGO");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIBackHyperlink
        {
            get
            {
                if ((this.mUIBackHyperlink == null))
                {
                    this.mUIBackHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIBackHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIBackHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIBackHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIBackHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Back";
                    this.mUIBackHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Teams";
                    this.mUIBackHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIBackHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Teams";
                    this.mUIBackHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "btn btn-default";
                    this.mUIBackHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" href=\"/Teams\"";
                    this.mUIBackHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "8";
                    this.mUIBackHyperlink.WindowTitles.Add("Team Details - CSGO");
                    #endregion
                }
                return this.mUIBackHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIBackHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICreateTeamCSGOInternWindow : BrowserWindow
    {
        
        public UICreateTeamCSGOInternWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Create Team - CSGO";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Create Team - CSGO");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "AddressDisplay Control";
            this.WindowTitles.Add("Create Team - CSGO");
            #endregion
        }
        
        #region Properties
        public UIPasekadresuClient2 UIPasekadresuClient
        {
            get
            {
                if ((this.mUIPasekadresuClient == null))
                {
                    this.mUIPasekadresuClient = new UIPasekadresuClient2(this);
                }
                return this.mUIPasekadresuClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPasekadresuClient2 mUIPasekadresuClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPasekadresuClient2 : WinClient
    {
        
        public UIPasekadresuClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Create Team - CSGO");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAdresEdit
        {
            get
            {
                if ((this.mUIAdresEdit == null))
                {
                    this.mUIAdresEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAdresEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Adres";
                    this.mUIAdresEdit.WindowTitles.Add("Create Team - CSGO");
                    #endregion
                }
                return this.mUIAdresEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAdresEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITeamDetailsCSGOInterWindow2 : BrowserWindow
    {
        
        public UITeamDetailsCSGOInterWindow2()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Team Details - CSGO";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Team Details - CSGO");
            this.WindowTitles.Add("Players - CSGO");
            this.WindowTitles.Add("Delete Player - CSGO");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UITeamDetailsCSGODocument1 UITeamDetailsCSGODocument
        {
            get
            {
                if ((this.mUITeamDetailsCSGODocument == null))
                {
                    this.mUITeamDetailsCSGODocument = new UITeamDetailsCSGODocument1(this);
                }
                return this.mUITeamDetailsCSGODocument;
            }
        }
        #endregion
        
        #region Fields
        private UITeamDetailsCSGODocument1 mUITeamDetailsCSGODocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITeamDetailsCSGODocument1 : HtmlDocument
    {
        
        public UITeamDetailsCSGODocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Team Details - CSGO";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Teams/Details/3073";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Teams/Details/3073";
            this.WindowTitles.Add("Team Details - CSGO");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIPlayersHyperlink
        {
            get
            {
                if ((this.mUIPlayersHyperlink == null))
                {
                    this.mUIPlayersHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIPlayersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "players";
                    this.mUIPlayersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIPlayersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIPlayersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Players";
                    this.mUIPlayersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Players";
                    this.mUIPlayersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIPlayersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Players";
                    this.mUIPlayersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIPlayersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=\"players\" href=\"/Players\"";
                    this.mUIPlayersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIPlayersHyperlink.WindowTitles.Add("Team Details - CSGO");
                    #endregion
                }
                return this.mUIPlayersHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIPlayersHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITeamDetailsCSGOInterWindow3 : BrowserWindow
    {
        
        public UITeamDetailsCSGOInterWindow3()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Team Details - CSGO";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Team Details - CSGO");
            this.WindowTitles.Add("Players - CSGO");
            this.WindowTitles.Add("Delete Player - CSGO");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIDeletePlayerCSGODocument1 UIDeletePlayerCSGODocument
        {
            get
            {
                if ((this.mUIDeletePlayerCSGODocument == null))
                {
                    this.mUIDeletePlayerCSGODocument = new UIDeletePlayerCSGODocument1(this);
                }
                return this.mUIDeletePlayerCSGODocument;
            }
        }
        #endregion
        
        #region Fields
        private UIDeletePlayerCSGODocument1 mUIDeletePlayerCSGODocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDeletePlayerCSGODocument1 : HtmlDocument
    {
        
        public UIDeletePlayerCSGODocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete Player - CSGO";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Players/Delete/3016";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Players/Delete/3016";
            this.WindowTitles.Add("Delete Player - CSGO");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = "delete_player";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-danger";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-danger\" id=\"delete_player";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "3";
                    this.mUIDeleteButton.WindowTitles.Add("Delete Player - CSGO");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPlayersCSGOInternetEWindow : BrowserWindow
    {
        
        public UIPlayersCSGOInternetEWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Players - CSGO";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Players - CSGO");
            this.WindowTitles.Add("Teams - CSGO");
            this.WindowTitles.Add("Delete Team - CSGO");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIDeleteTeamCSGODocument UIDeleteTeamCSGODocument
        {
            get
            {
                if ((this.mUIDeleteTeamCSGODocument == null))
                {
                    this.mUIDeleteTeamCSGODocument = new UIDeleteTeamCSGODocument(this);
                }
                return this.mUIDeleteTeamCSGODocument;
            }
        }
        #endregion
        
        #region Fields
        private UIDeleteTeamCSGODocument mUIDeleteTeamCSGODocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDeleteTeamCSGODocument : HtmlDocument
    {
        
        public UIDeleteTeamCSGODocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete Team - CSGO";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Teams/Delete/3073";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Teams/Delete/3073";
            this.WindowTitles.Add("Delete Team - CSGO");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = "delete_team";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-danger";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-danger\" id=\"delete_team\" ";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "3";
                    this.mUIDeleteButton.WindowTitles.Add("Delete Team - CSGO");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICreateTeamCSGOInternWindow1 : BrowserWindow
    {
        
        public UICreateTeamCSGOInternWindow1()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Create Team - CSGO";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Create Team - CSGO");
            this.WindowTitles.Add("Players - CSGO");
            this.WindowTitles.Add("Delete Player - CSGO");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIDeletePlayerCSGODocument2 UIDeletePlayerCSGODocument
        {
            get
            {
                if ((this.mUIDeletePlayerCSGODocument == null))
                {
                    this.mUIDeletePlayerCSGODocument = new UIDeletePlayerCSGODocument2(this);
                }
                return this.mUIDeletePlayerCSGODocument;
            }
        }
        #endregion
        
        #region Fields
        private UIDeletePlayerCSGODocument2 mUIDeletePlayerCSGODocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDeletePlayerCSGODocument2 : HtmlDocument
    {
        
        public UIDeletePlayerCSGODocument2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete Player - CSGO";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Players/Delete/3017";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Players/Delete/3017";
            this.WindowTitles.Add("Delete Player - CSGO");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = "delete_player";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-danger";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-danger\" id=\"delete_player";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "3";
                    this.mUIDeleteButton.WindowTitles.Add("Delete Player - CSGO");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPlayersCSGOInternetEWindow1 : BrowserWindow
    {
        
        public UIPlayersCSGOInternetEWindow1()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Players - CSGO";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Players - CSGO");
            this.WindowTitles.Add("Teams - CSGO");
            this.WindowTitles.Add("Delete Team - CSGO");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIDeleteTeamCSGODocument1 UIDeleteTeamCSGODocument
        {
            get
            {
                if ((this.mUIDeleteTeamCSGODocument == null))
                {
                    this.mUIDeleteTeamCSGODocument = new UIDeleteTeamCSGODocument1(this);
                }
                return this.mUIDeleteTeamCSGODocument;
            }
        }
        #endregion
        
        #region Fields
        private UIDeleteTeamCSGODocument1 mUIDeleteTeamCSGODocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDeleteTeamCSGODocument1 : HtmlDocument
    {
        
        public UIDeleteTeamCSGODocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete Team - CSGO";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Teams/Delete/3074";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Teams/Delete/3074";
            this.WindowTitles.Add("Delete Team - CSGO");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UITeamDeletionAreyou10Pane
        {
            get
            {
                if ((this.mUITeamDeletionAreyou10Pane == null))
                {
                    this.mUITeamDeletionAreyou10Pane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUITeamDeletionAreyou10Pane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUITeamDeletionAreyou10Pane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUITeamDeletionAreyou10Pane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Team Deletion\r\n\r\nAre you 100% sure you w";
                    this.mUITeamDeletionAreyou10Pane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUITeamDeletionAreyou10Pane.FilterProperties[HtmlDiv.PropertyNames.Class] = "container body-content";
                    this.mUITeamDeletionAreyou10Pane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"container body-content\"";
                    this.mUITeamDeletionAreyou10Pane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "4";
                    this.mUITeamDeletionAreyou10Pane.WindowTitles.Add("Delete Team - CSGO");
                    #endregion
                }
                return this.mUITeamDeletionAreyou10Pane;
            }
        }
        
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = "delete_team";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-danger";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-danger\" id=\"delete_team\" ";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "3";
                    this.mUIDeleteButton.WindowTitles.Add("Delete Team - CSGO");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUITeamDeletionAreyou10Pane;
        
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICreateTeamCSGOInternWindow2 : BrowserWindow
    {
        
        public UICreateTeamCSGOInternWindow2()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Create Team - CSGO";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Create Team - CSGO");
            this.WindowTitles.Add("Teams - CSGO");
            this.WindowTitles.Add("Players - CSGO");
            this.WindowTitles.Add("Delete Player - CSGO");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIDeletePlayerCSGODocument3 UIDeletePlayerCSGODocument
        {
            get
            {
                if ((this.mUIDeletePlayerCSGODocument == null))
                {
                    this.mUIDeletePlayerCSGODocument = new UIDeletePlayerCSGODocument3(this);
                }
                return this.mUIDeletePlayerCSGODocument;
            }
        }
        #endregion
        
        #region Fields
        private UIDeletePlayerCSGODocument3 mUIDeletePlayerCSGODocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDeletePlayerCSGODocument3 : HtmlDocument
    {
        
        public UIDeletePlayerCSGODocument3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete Player - CSGO";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Players/Delete/3025";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Players/Delete/3025";
            this.WindowTitles.Add("Delete Player - CSGO");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = "delete_player";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-danger";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-danger\" id=\"delete_player";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "3";
                    this.mUIDeleteButton.WindowTitles.Add("Delete Player - CSGO");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPlayersCSGOInternetEWindow2 : BrowserWindow
    {
        
        public UIPlayersCSGOInternetEWindow2()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Players - CSGO";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Players - CSGO");
            this.WindowTitles.Add("Teams - CSGO");
            this.WindowTitles.Add("Delete Team - CSGO");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIDeleteTeamCSGODocument2 UIDeleteTeamCSGODocument
        {
            get
            {
                if ((this.mUIDeleteTeamCSGODocument == null))
                {
                    this.mUIDeleteTeamCSGODocument = new UIDeleteTeamCSGODocument2(this);
                }
                return this.mUIDeleteTeamCSGODocument;
            }
        }
        #endregion
        
        #region Fields
        private UIDeleteTeamCSGODocument2 mUIDeleteTeamCSGODocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDeleteTeamCSGODocument2 : HtmlDocument
    {
        
        public UIDeleteTeamCSGODocument2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete Team - CSGO";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Teams/Delete/3083";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Teams/Delete/3083";
            this.WindowTitles.Add("Delete Team - CSGO");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = "delete_team";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-danger";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-danger\" id=\"delete_team\" ";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "3";
                    this.mUIDeleteButton.WindowTitles.Add("Delete Team - CSGO");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
}
